/* src\js\Moderator.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../../web_modules/svelte/internal.js";

import Peer from "../../web_modules/peerjs.js";
import Stream from "./Stream.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (37:0) {#each connections as connection}
function create_each_block(ctx) {
	let stream;
	let current;

	stream = new Stream({
			props: { connection: /*connection*/ ctx[3] }
		});

	return {
		c() {
			create_component(stream.$$.fragment);
		},
		m(target, anchor) {
			mount_component(stream, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const stream_changes = {};
			if (dirty & /*connections*/ 1) stream_changes.connection = /*connection*/ ctx[3];
			stream.$set(stream_changes);
		},
		i(local) {
			if (current) return;
			transition_in(stream.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(stream.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(stream, detaching);
		}
	};
}

function create_fragment(ctx) {
	let p;
	let t2;
	let each_1_anchor;
	let current;
	let each_value = /*connections*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			p = element("p");
			p.textContent = `Мой id: ${id}`;
			t2 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			insert(target, p, anchor);
			insert(target, t2, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*connections*/ 1) {
				each_value = /*connections*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(p);
			if (detaching) detach(t2);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

const id = "m24webrtc";

function instance($$self, $$props, $$invalidate) {
	const callOptions = {
		host: "e99d0d498e2b.ngrok.io",
		port: 443,
		path: "/myapp",
		debug: 3,
		config: {
			iceServers: [
				{
					url: "stun:194.67.116.195:3479",
					username: "test",
					credential: "test"
				},
				{
					url: "turn:194.67.116.195:3478",
					username: "test",
					credential: "test"
				}
			]
		}
	};

	let peer = new Peer(id, callOptions);
	let connections = [];

	peer.on("call", function (call) {
		call.answer();
		$$invalidate(0, connections = [...connections, call]);
	});

	return [connections];
}

class Moderator extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Moderator;