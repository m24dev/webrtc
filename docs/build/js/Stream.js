/* src\js\Stream.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	detach,
	element,
	empty,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	space,
	text
} from "../../web_modules/svelte/internal.js";

import { onMount } from "../../web_modules/svelte.js";

function create_if_block_1(ctx) {
	let div;
	let t0;
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			t0 = text("Звонок начат...\r\n        ");
			button = element("button");
			button.textContent = "Завершить";
			attr(div, "class", "form-group");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, button);

			if (!mounted) {
				dispose = listen(button, "click", /*handleCloseClick*/ ctx[3]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (43:0) {#if isDisconnected}
function create_if_block(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.textContent = "Соединение разорвано.";
			attr(div, "class", "form-group");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment(ctx) {
	let video_1;
	let t0;
	let t1;
	let if_block1_anchor;
	let if_block0 = /*isCallStarted*/ ctx[0] && create_if_block_1(ctx);
	let if_block1 = /*isDisconnected*/ ctx[1] && create_if_block(ctx);

	return {
		c() {
			video_1 = element("video");
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			video_1.playsInline = true;
			video_1.autoplay = true;
			video_1.muted = true;
		},
		m(target, anchor) {
			insert(target, video_1, anchor);
			/*video_1_binding*/ ctx[5](video_1);
			insert(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (/*isCallStarted*/ ctx[0]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*isDisconnected*/ ctx[1]) {
				if (if_block1) {
					
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(video_1);
			/*video_1_binding*/ ctx[5](null);
			if (detaching) detach(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t1);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(if_block1_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { connection } = $$props;
	console.log(connection);
	let isCallStarted = true;
	let isDisconnected = false;
	let video;

	function onCallClose() {
		$$invalidate(0, isCallStarted = false);
		$$invalidate(1, isDisconnected = true);
	}

	onMount(() => {
		setTimeout(
			() => {
				$$invalidate(2, video.srcObject = connection.remoteStream, video);

				$$invalidate(
					2,
					video.onloadedmetadata = function (e) {
						video.play();
					},
					video
				);
			},
			1500
		);
	});

	function handleCloseClick() {
		connection.peerConnection.close();
	}

	connection.on("close", function () {
		$$invalidate(0, isCallStarted = false);
		$$invalidate(1, isDisconnected = true);
	});

	function video_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			video = $$value;
			$$invalidate(2, video);
		});
	}

	$$self.$$set = $$props => {
		if ("connection" in $$props) $$invalidate(4, connection = $$props.connection);
	};

	return [
		isCallStarted,
		isDisconnected,
		video,
		handleCloseClick,
		connection,
		video_1_binding
	];
}

class Stream extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { connection: 4 });
	}
}

export default Stream;