/* src\js\Caller.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	space,
	text
} from "../../web_modules/svelte/internal.js";

import Peer from "../../web_modules/peerjs.js";

function create_else_block(ctx) {
	let div;
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			button = element("button");
			button.textContent = "Позвонить";
			attr(div, "class", "form-group");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, button);

			if (!mounted) {
				dispose = listen(button, "click", /*makeCall*/ ctx[3]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (69:8) {#if isCallStarted}
function create_if_block_1(ctx) {
	let div;
	let t0;
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			t0 = text("Звонок начат...\r\n                ");
			button = element("button");
			button.textContent = "Завершить";
			attr(div, "class", "form-group");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, button);

			if (!mounted) {
				dispose = listen(button, "click", /*handleCloseClick*/ ctx[4]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (79:8) {#if isDisconnected}
function create_if_block(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.textContent = "Соединение разорвано.";
			attr(div, "class", "form-group");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let video_1;
	let t0;
	let t1;

	function select_block_type(ctx, dirty) {
		if (/*isCallStarted*/ ctx[0]) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block0 = current_block_type(ctx);
	let if_block1 = /*isDisconnected*/ ctx[1] && create_if_block(ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			video_1 = element("video");
			t0 = space();
			if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			video_1.playsInline = true;
			video_1.autoplay = true;
			video_1.muted = true;
			attr(div0, "class", "users__item");
			attr(div1, "class", "users");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, video_1);
			/*video_1_binding*/ ctx[5](video_1);
			append(div0, t0);
			if_block0.m(div0, null);
			append(div0, t1);
			if (if_block1) if_block1.m(div0, null);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(div0, t1);
				}
			}

			if (/*isDisconnected*/ ctx[1]) {
				if (if_block1) {
					
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(div0, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			/*video_1_binding*/ ctx[5](null);
			if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

const remoteId = "m24webrtc";

function instance($$self, $$props, $$invalidate) {
	const callOptions = {
		host: "670b4dac6fd8.ngrok.io",
		port: 443,
		path: "/myapp",
		debug: 3,
		config: {
			iceServers: [
				{
					url: "stun:194.67.116.195:3479",
					username: "test",
					credential: "test"
				},
				{
					url: "turn:194.67.116.195:3478",
					username: "test",
					credential: "test"
				}
			]
		}
	};

	let isCallStarted = false;
	let isDisconnected = false;
	let video;
	let peercall;
	const peer = new Peer(callOptions);

	peer.on("error", err => {
		console.log(err);
	});

	function makeCall() {
		navigator.mediaDevices.getUserMedia({ audio: true, video: true }).then(function (mediaStream) {
			peercall = peer.call(remoteId, mediaStream);
			$$invalidate(0, isCallStarted = true);
			$$invalidate(1, isDisconnected = false);
			peercall.on("close", onCallClose);

			$$invalidate(
				2,
				video.onloadedmetadata = function (e) {
					video.play();
				},
				video
			);

			$$invalidate(2, video.srcObject = mediaStream, video);
		}).catch(function (err) {
			alert(err);
			console.log(err.name + ": " + err.message);
		});
	}

	function onCallClose() {
		$$invalidate(0, isCallStarted = false);
		$$invalidate(1, isDisconnected = true);
	}

	function handleCloseClick() {
		peercall.close();
	}

	function video_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			video = $$value;
			$$invalidate(2, video);
		});
	}

	return [
		isCallStarted,
		isDisconnected,
		video,
		makeCall,
		handleCloseClick,
		video_1_binding
	];
}

class Caller extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Caller;