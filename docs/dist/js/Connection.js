import './Connection.css.proxy.js';
/* src\js\Connection.svelte generated by Svelte v3.29.6 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	space,
	svg_element,
	text,
	toggle_class,
	xlink_attr
} from "../../web_modules/svelte/internal.js";

import { onMount, createEventDispatcher } from "../../web_modules/svelte.js";
import settings from "./settings.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i];
	return child_ctx;
}

// (127:8) {:else}
function create_else_block(ctx) {
	let svg;
	let use;

	return {
		c() {
			svg = svg_element("svg");
			use = svg_element("use");
			xlink_attr(use, "xlink:href", "/_dist_/images/bootstrap-icons.svg#volume-up-fill");
			attr(svg, "class", "bi");
			attr(svg, "width", "32");
			attr(svg, "height", "32");
			attr(svg, "fill", "currentColor");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, use);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (123:8) {#if isMuted}
function create_if_block(ctx) {
	let svg;
	let use;

	return {
		c() {
			svg = svg_element("svg");
			use = svg_element("use");
			xlink_attr(use, "xlink:href", "/_dist_/images/bootstrap-icons.svg#volume-mute-fill");
			attr(svg, "class", "bi");
			attr(svg, "width", "32");
			attr(svg, "height", "32");
			attr(svg, "fill", "currentColor");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, use);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (135:12) {#each messages as message}
function create_each_block(ctx) {
	let div3;
	let div2;
	let div0;
	let t0_value = /*message*/ ctx[14].from + "";
	let t0;
	let t1;
	let div1;
	let t2_value = /*message*/ ctx[14].text + "";
	let t2;
	let t3;

	return {
		c() {
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			div1 = element("div");
			t2 = text(t2_value);
			t3 = space();
			attr(div0, "class", "chat__author svelte-1wqx1ah");
			attr(div1, "class", "chat__text");
			attr(div2, "class", "chat__message d-inline-block py-1 px-2 shadow-sm svelte-1wqx1ah");
			toggle_class(div2, "bg-success", /*message*/ ctx[14].from === /*username*/ ctx[0]);
			attr(div3, "class", "chat__item d-flex svelte-1wqx1ah");
			toggle_class(div3, "justify-content-end", /*message*/ ctx[14].from === /*username*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div2);
			append(div2, div0);
			append(div0, t0);
			append(div2, t1);
			append(div2, div1);
			append(div1, t2);
			append(div3, t3);
		},
		p(ctx, dirty) {
			if (dirty & /*messages*/ 8 && t0_value !== (t0_value = /*message*/ ctx[14].from + "")) set_data(t0, t0_value);
			if (dirty & /*messages*/ 8 && t2_value !== (t2_value = /*message*/ ctx[14].text + "")) set_data(t2, t2_value);

			if (dirty & /*messages, username*/ 9) {
				toggle_class(div2, "bg-success", /*message*/ ctx[14].from === /*username*/ ctx[0]);
			}

			if (dirty & /*messages, username*/ 9) {
				toggle_class(div3, "justify-content-end", /*message*/ ctx[14].from === /*username*/ ctx[0]);
			}
		},
		d(detaching) {
			if (detaching) detach(div3);
		}
	};
}

function create_fragment(ctx) {
	let div5;
	let div0;
	let video_1;
	let t0;
	let button0;
	let t1;
	let button1;
	let t2;
	let div4;
	let div1;
	let t3;
	let div3;
	let input;
	let t4;
	let div2;
	let button2;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*isMuted*/ ctx[2]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);
	let each_value = /*messages*/ ctx[3];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div5 = element("div");
			div0 = element("div");
			video_1 = element("video");
			t0 = space();
			button0 = element("button");
			button0.innerHTML = `<svg class="bi" width="32" height="32" fill="currentColor"><use xlink:href="/_dist_/images/bootstrap-icons.svg#box-arrow-in-left"></use></svg>`;
			t1 = space();
			button1 = element("button");
			if_block.c();
			t2 = space();
			div4 = element("div");
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t3 = space();
			div3 = element("div");
			input = element("input");
			t4 = space();
			div2 = element("div");
			button2 = element("button");
			button2.innerHTML = `<svg class="bi" width="16" height="16" fill="currentColor"><use xlink:href="/_dist_/images/bootstrap-icons.svg#chat-fill"></use></svg>`;
			video_1.playsInline = true;
			video_1.autoplay = true;
			video_1.muted = /*isMuted*/ ctx[2];
			attr(video_1, "class", "svelte-1wqx1ah");
			attr(div0, "class", "connection__video svelte-1wqx1ah");
			attr(button0, "type", "button");
			attr(button0, "class", "btn btn-icon text-light btn-stop svelte-1wqx1ah");
			attr(button1, "type", "button");
			attr(button1, "class", "btn btn-icon text-light btn-volume svelte-1wqx1ah");
			attr(div1, "class", "chat svelte-1wqx1ah");
			attr(input, "type", "text");
			attr(input, "class", "form-control");
			attr(input, "placeholder", "Текст сообщения");
			attr(button2, "type", "button");
			attr(button2, "class", "btn btn-primary");
			attr(div2, "class", "input-group-append");
			attr(div3, "class", "input-group shadow-sm");
			attr(div4, "class", "connection__chat p-4 svelte-1wqx1ah");
			attr(div5, "class", "connection bg-dark svelte-1wqx1ah");
		},
		m(target, anchor) {
			insert(target, div5, anchor);
			append(div5, div0);
			append(div0, video_1);
			/*video_1_binding*/ ctx[10](video_1);
			append(div5, t0);
			append(div5, button0);
			append(div5, t1);
			append(div5, button1);
			if_block.m(button1, null);
			append(div5, t2);
			append(div5, div4);
			append(div4, div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			append(div4, t3);
			append(div4, div3);
			append(div3, input);
			set_input_value(input, /*newMessage*/ ctx[4]);
			append(div3, t4);
			append(div3, div2);
			append(div2, button2);

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*handleClose*/ ctx[7]),
					listen(button1, "click", /*handleVolumeToggle*/ ctx[6]),
					listen(input, "input", /*input_input_handler*/ ctx[11]),
					listen(button2, "click", /*handleSend*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*isMuted*/ 4) {
				video_1.muted = /*isMuted*/ ctx[2];
			}

			if (current_block_type !== (current_block_type = select_block_type(ctx, dirty))) {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(button1, null);
				}
			}

			if (dirty & /*messages, username*/ 9) {
				each_value = /*messages*/ ctx[3];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*newMessage*/ 16 && input.value !== /*newMessage*/ ctx[4]) {
				set_input_value(input, /*newMessage*/ ctx[4]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div5);
			/*video_1_binding*/ ctx[10](null);
			if_block.d();
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { username } = $$props;
	let { dataConnection } = $$props;
	let { mediaConnection } = $$props;
	let video;
	let isMuted = true;
	let messages = [];
	let newMessage = "";

	onMount(() => {
		setTimeout(
			() => {
				$$invalidate(1, video.srcObject = mediaConnection.remoteStream || mediaConnection.localStream, video);

				$$invalidate(
					1,
					video.onloadedmetadata = function () {
						video.play();
					},
					video
				);
			},
			1500
		);
	});

	function handleSend() {
		console.log(dataConnection);
		let data = { from: username, text: newMessage };
		$$invalidate(4, newMessage = "");
		dataConnection.send(data);
		handleMessage(data);
	}

	function handleMessage(data) {
		console.log(dataConnection);
		$$invalidate(3, messages = [...messages, data]);
	}

	function handleVolumeToggle() {
		$$invalidate(2, isMuted = !isMuted);
	}

	function handleClose() {
		dataConnection.close();
	}

	dataConnection.on("data", handleMessage);

	dataConnection.on("close", () => {
		dispatch("close");
	});

	dataConnection.on("error", err => {
		console.log(err);
	});

	function video_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			video = $$value;
			$$invalidate(1, video);
		});
	}

	function input_input_handler() {
		newMessage = this.value;
		$$invalidate(4, newMessage);
	}

	$$self.$$set = $$props => {
		if ("username" in $$props) $$invalidate(0, username = $$props.username);
		if ("dataConnection" in $$props) $$invalidate(8, dataConnection = $$props.dataConnection);
		if ("mediaConnection" in $$props) $$invalidate(9, mediaConnection = $$props.mediaConnection);
	};

	return [
		username,
		video,
		isMuted,
		messages,
		newMessage,
		handleSend,
		handleVolumeToggle,
		handleClose,
		dataConnection,
		mediaConnection,
		video_1_binding,
		input_input_handler
	];
}

class Connection extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			username: 0,
			dataConnection: 8,
			mediaConnection: 9
		});
	}
}

export default Connection;