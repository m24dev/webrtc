/* src\js\AdminApp.svelte generated by Svelte v3.29.6 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	safe_not_equal,
	space,
	text,
	transition_in,
	transition_out
} from "../../web_modules/svelte/internal.js";

import Peer from "../../web_modules/peerjs.js";
import settings from "./settings.js";
import { onMount } from "../../web_modules/svelte.js";
import AdminUser from "./AdminUser.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

// (105:0) {:else}
function create_else_block_1(ctx) {
	let div1;

	return {
		c() {
			div1 = element("div");
			div1.innerHTML = `<div class="spinner-border text-primary"><span class="sr-only">Загрузка...</span></div>`;
			attr(div1, "class", "loader");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

// (90:0) {#if isPeerReady}
function create_if_block(ctx) {
	let div0;
	let button;
	let t0;
	let t1;
	let div1;
	let current_block_type_index;
	let if_block;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*users*/ ctx[2].length) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			div0 = element("div");
			button = element("button");
			t0 = text("Следующий вопрос");
			t1 = space();
			div1 = element("div");
			if_block.c();
			attr(button, "type", "button");
			attr(button, "class", "btn btn-primary");
			button.disabled = /*isQuestionActive*/ ctx[1];
			attr(div0, "class", "text-center mb-3");
			attr(div1, "class", "users");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			append(div0, button);
			append(button, t0);
			insert(target, t1, anchor);
			insert(target, div1, anchor);
			if_blocks[current_block_type_index].m(div1, null);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*nextQuestion*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty & /*isQuestionActive*/ 2) {
				button.disabled = /*isQuestionActive*/ ctx[1];
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div1, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching) detach(t1);
			if (detaching) detach(div1);
			if_blocks[current_block_type_index].d();
			mounted = false;
			dispose();
		}
	};
}

// (99:8) {:else}
function create_else_block(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<p>Ожидание пользователей</p>`;
			attr(div, "class", "p-5 text-center");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (95:8) {#if users.length}
function create_if_block_1(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*users*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*users, questions, currentQuestion, onSetUserConneсt, onConneсtionClose*/ 220) {
				each_value = /*users*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (96:12) {#each users as user}
function create_each_block(ctx) {
	let adminuser;
	let current;

	adminuser = new AdminUser({
			props: {
				user: /*user*/ ctx[9],
				question: /*questions*/ ctx[3],
				currentQuestion: /*currentQuestion*/ ctx[4]
			}
		});

	adminuser.$on("setUserConnect", /*onSetUserConneсt*/ ctx[6]);
	adminuser.$on("close", /*onConneсtionClose*/ ctx[7]);

	return {
		c() {
			create_component(adminuser.$$.fragment);
		},
		m(target, anchor) {
			mount_component(adminuser, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const adminuser_changes = {};
			if (dirty & /*users*/ 4) adminuser_changes.user = /*user*/ ctx[9];
			if (dirty & /*questions*/ 8) adminuser_changes.question = /*questions*/ ctx[3];
			if (dirty & /*currentQuestion*/ 16) adminuser_changes.currentQuestion = /*currentQuestion*/ ctx[4];
			adminuser.$set(adminuser_changes);
		},
		i(local) {
			if (current) return;
			transition_in(adminuser.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(adminuser.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(adminuser, detaching);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*isPeerReady*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const peer = new Peer("admin", settings.callOptions);
	let isPeerReady = false;
	let isQuestionActive = false;
	let users = [];
	let questions = [];
	let currentQuestion = 0;

	onMount(() => {
		fetch("http://localhost:3000/questions").then(response => {
			return response.json();
		}).then(data => {
			$$invalidate(3, questions = data);
		});
	});

	function nextQuestion() {
		$$invalidate(1, isQuestionActive = true);

		users.map(user => {
			let data = { action: "nextQuestion" };
			user.dataConnection.send(data);
		});

		setTimeout(
			() => {
				$$invalidate(4, currentQuestion++, currentQuestion);
				$$invalidate(1, isQuestionActive = false);
			},
			5000
		);
	}

	function onSetUserConneсt(e) {
		users.map(user => {
			if (user.peer === e.detail.peer) {
				user.dataConnection.send({
					action: "call",
					targetID: e.detail.targetID
				});
			}
		});
	}

	function onConneсtionClose(e) {
		$$invalidate(2, users = users.map(user => {
			if (user.peer === e.detail.peer) {
				return { ...user, isDataConnectionClosed: true };
			}

			return user;
		}));
	}

	peer.on("open", function (id) {
		console.log("open");
		$$invalidate(0, isPeerReady = true);
	});

	peer.on("connection", function (conn) {
		console.log("connection");
		$$invalidate(2, users = [...users, { dataConnection: conn, peer: conn.peer }]);
	});

	peer.on("call", function (conn) {
		console.log("call");

		$$invalidate(2, users = users.map(user => {
			if (user.peer === conn.peer) {
				return { ...user, mediaConnection: conn };
			}

			return user;
		}));
	});

	peer.on("error", function (err) {
		console.error(err);
	});

	peer.on("disconnected", function () {
		console.log("disconnected");
	});

	return [
		isPeerReady,
		isQuestionActive,
		users,
		questions,
		currentQuestion,
		nextQuestion,
		onSetUserConneсt,
		onConneсtionClose
	];
}

class AdminApp extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default AdminApp;