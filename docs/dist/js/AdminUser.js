import './AdminUser.css.proxy.js';
/* src\js\AdminUser.svelte generated by Svelte v3.29.6 */
import {
	SvelteComponent,
	action_destroyer,
	add_render_callback,
	append,
	attr,
	create_in_transition,
	detach,
	element,
	init,
	insert,
	is_function,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	space,
	svg_element,
	text,
	xlink_attr
} from "../../web_modules/svelte/internal.js";

import { createEventDispatcher } from "../../web_modules/svelte.js";
import { fly } from "../../web_modules/svelte/transition.js";

function create_if_block_1(ctx) {
	let div1;
	let div0;
	let video_1;
	let video_action;
	let t;
	let mounted;
	let dispose;
	let if_block = !/*isMediaConnectionClosed*/ ctx[1] && create_if_block_2(ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			video_1 = element("video");
			t = space();
			if (if_block) if_block.c();
			video_1.muted = true;
			attr(video_1, "class", "svelte-li6vj2");
			attr(div0, "class", "user__video bg-dark text-light svelte-li6vj2");
			attr(div1, "class", "col-md-2");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, video_1);
			append(div0, t);
			if (if_block) if_block.m(div0, null);

			if (!mounted) {
				dispose = action_destroyer(video_action = /*video*/ ctx[4].call(null, video_1, /*remoteStream*/ ctx[2]));
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (video_action && is_function(video_action.update) && dirty & /*remoteStream*/ 4) video_action.update.call(null, /*remoteStream*/ ctx[2]);

			if (!/*isMediaConnectionClosed*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					if_block.m(div0, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};
}

// (92:20) {#if !isMediaConnectionClosed}
function create_if_block_2(ctx) {
	let button;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*user*/ ctx[0].mediaConnection.open) return create_if_block_3;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			button = element("button");
			if_block.c();
			attr(button, "type", "button");
			attr(button, "class", "btn btn-icon btn-answer svelte-li6vj2");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			if_block.m(button, null);

			if (!mounted) {
				dispose = listen(button, "click", /*toggleMedia*/ ctx[3]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (current_block_type !== (current_block_type = select_block_type(ctx, dirty))) {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(button, null);
				}
			}
		},
		d(detaching) {
			if (detaching) detach(button);
			if_block.d();
			mounted = false;
			dispose();
		}
	};
}

// (98:28) {:else}
function create_else_block(ctx) {
	let svg;
	let use;

	return {
		c() {
			svg = svg_element("svg");
			use = svg_element("use");
			xlink_attr(use, "xlink:href", "/dist/images/bootstrap-icons.svg#camera-video");
			attr(svg, "class", "bi text-success");
			attr(svg, "width", "32");
			attr(svg, "height", "32");
			attr(svg, "fill", "currentColor");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, use);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (94:28) {#if user.mediaConnection.open}
function create_if_block_3(ctx) {
	let svg;
	let use;

	return {
		c() {
			svg = svg_element("svg");
			use = svg_element("use");
			xlink_attr(use, "xlink:href", "/dist/images/bootstrap-icons.svg#camera-video-off");
			attr(svg, "class", "bi text-danger");
			attr(svg, "width", "32");
			attr(svg, "height", "32");
			attr(svg, "fill", "currentColor");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, use);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (111:16) {#if user.mediaConnection}
function create_if_block(ctx) {
	let div2;
	let div0;
	let button0;
	let t1;
	let button1;
	let t3;
	let button2;
	let t5;
	let button3;
	let t7;
	let button4;
	let t9;
	let button5;
	let t11;
	let div1;
	let button6;
	let mounted;
	let dispose;

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			button0 = element("button");
			button0.textContent = "1";
			t1 = space();
			button1 = element("button");
			button1.textContent = "2";
			t3 = space();
			button2 = element("button");
			button2.textContent = "3";
			t5 = space();
			button3 = element("button");
			button3.textContent = "4";
			t7 = space();
			button4 = element("button");
			button4.textContent = "5";
			t9 = space();
			button5 = element("button");
			button5.textContent = "6";
			t11 = space();
			div1 = element("div");
			button6 = element("button");
			button6.textContent = "Мультиэкран";
			attr(button0, "type", "button");
			attr(button0, "class", "btn btn-secondary");
			attr(button1, "type", "button");
			attr(button1, "class", "btn btn-secondary");
			attr(button2, "type", "button");
			attr(button2, "class", "btn btn-secondary");
			attr(button3, "type", "button");
			attr(button3, "class", "btn btn-secondary");
			attr(button4, "type", "button");
			attr(button4, "class", "btn btn-secondary");
			attr(button5, "type", "button");
			attr(button5, "class", "btn btn-secondary");
			attr(div0, "class", "btn-group mr-2");
			attr(button6, "type", "button");
			attr(button6, "class", "btn btn-secondary");
			attr(div1, "class", "btn-group btn-group-toggle");
			attr(div1, "data-toggle", "buttons");
			attr(div2, "class", "btn-toolbar");
			attr(div2, "role", "toolbar");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, button0);
			append(div0, t1);
			append(div0, button1);
			append(div0, t3);
			append(div0, button2);
			append(div0, t5);
			append(div0, button3);
			append(div0, t7);
			append(div0, button4);
			append(div0, t9);
			append(div0, button5);
			append(div2, t11);
			append(div2, div1);
			append(div1, button6);

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler*/ ctx[8]),
					listen(button1, "click", /*click_handler_1*/ ctx[9]),
					listen(button2, "click", /*click_handler_2*/ ctx[10]),
					listen(button3, "click", /*click_handler_3*/ ctx[11]),
					listen(button4, "click", /*click_handler_4*/ ctx[12]),
					listen(button5, "click", /*click_handler_5*/ ctx[13]),
					listen(button6, "click", /*click_handler_6*/ ctx[14])
				];

				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div2);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let div5;
	let div4;
	let t0;
	let div1;
	let div0;
	let h50;
	let t1_value = /*user*/ ctx[0].dataConnection.metadata.name + "";
	let t1;
	let t2;
	let div1_class_value;
	let t3;
	let div3;
	let div2;
	let h51;
	let t5;
	let p;
	let div5_intro;
	let if_block0 = /*user*/ ctx[0].mediaConnection && create_if_block_1(ctx);
	let if_block1 = /*user*/ ctx[0].mediaConnection && create_if_block(ctx);

	return {
		c() {
			div5 = element("div");
			div4 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			div1 = element("div");
			div0 = element("div");
			h50 = element("h5");
			t1 = text(t1_value);
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			div3 = element("div");
			div2 = element("div");
			h51 = element("h5");
			h51.textContent = "Ответы";
			t5 = space();
			p = element("p");
			p.textContent = `${points}`;
			attr(h50, "class", "card-title");
			attr(div0, "class", "card-body");

			attr(div1, "class", div1_class_value = /*user*/ ctx[0].mediaConnection
			? "col-md-8"
			: "col-md-10");

			attr(h51, "class", "card-title");
			attr(p, "class", "card-text");
			attr(div2, "class", "card-body");
			attr(div3, "class", "col-md-2");
			attr(div4, "class", "row no-gutters");
			attr(div5, "class", "user card bg-light shadow-sm mb-3 svelte-li6vj2");
		},
		m(target, anchor) {
			insert(target, div5, anchor);
			append(div5, div4);
			if (if_block0) if_block0.m(div4, null);
			append(div4, t0);
			append(div4, div1);
			append(div1, div0);
			append(div0, h50);
			append(h50, t1);
			append(div0, t2);
			if (if_block1) if_block1.m(div0, null);
			append(div4, t3);
			append(div4, div3);
			append(div3, div2);
			append(div2, h51);
			append(div2, t5);
			append(div2, p);
		},
		p(ctx, [dirty]) {
			if (/*user*/ ctx[0].mediaConnection) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(div4, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*user*/ 1 && t1_value !== (t1_value = /*user*/ ctx[0].dataConnection.metadata.name + "")) set_data(t1, t1_value);

			if (/*user*/ ctx[0].mediaConnection) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(div0, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty & /*user*/ 1 && div1_class_value !== (div1_class_value = /*user*/ ctx[0].mediaConnection
			? "col-md-8"
			: "col-md-10")) {
				attr(div1, "class", div1_class_value);
			}
		},
		i(local) {
			if (!div5_intro) {
				add_render_callback(() => {
					div5_intro = create_in_transition(div5, fly, { y: 30, duration: 300 });
					div5_intro.start();
				});
			}
		},
		o: noop,
		d(detaching) {
			if (detaching) detach(div5);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

let points = 0;

function handleData(data) {
	
} // if (data.action === 'answer') {
//     if (data.answer == questions[currentQuestion].answer) {

function instance($$self, $$props, $$invalidate) {
	let { user } = $$props;
	let { questions } = $$props;
	let { currentQuestion } = $$props;
	const dispatch = createEventDispatcher();
	let isMediaConnectionClosed = false;
	let remoteStream;

	function toggleMedia() {
		if (remoteStream) {
			user.mediaConnection.close();
			$$invalidate(1, isMediaConnectionClosed = true);
			$$invalidate(2, remoteStream = null);
		} else {
			user.mediaConnection.on("stream", stream => {
				if (remoteStream) return false;
				console.log("stream");
				$$invalidate(2, remoteStream = stream);
			});

			user.mediaConnection.on("error", err => {
				console.error(err);
			});

			user.mediaConnection.answer();
		}
	}

	function video(node, remoteStream) {
		return {
			update(remoteStream) {
				play(node);
			}
		};
	}

	function play(el) {
		el.srcObject = remoteStream;

		el.onloadedmetadata = () => {
			el.play();
		};
	}

	function connectToScreen(n) {
		dispatch("setUserConnect", { peer: user.peer, targetID: n });
	}

	//         points++;
	//     }
	// }
	user.dataConnection.on("data", handleData);

	const click_handler = () => connectToScreen(1);
	const click_handler_1 = () => connectToScreen(2);
	const click_handler_2 = () => connectToScreen(3);
	const click_handler_3 = () => connectToScreen(4);
	const click_handler_4 = () => connectToScreen(5);
	const click_handler_5 = () => connectToScreen(6);
	const click_handler_6 = () => connectToScreen(7);

	$$self.$$set = $$props => {
		if ("user" in $$props) $$invalidate(0, user = $$props.user);
		if ("questions" in $$props) $$invalidate(6, questions = $$props.questions);
		if ("currentQuestion" in $$props) $$invalidate(7, currentQuestion = $$props.currentQuestion);
	};

	return [
		user,
		isMediaConnectionClosed,
		remoteStream,
		toggleMedia,
		video,
		connectToScreen,
		questions,
		currentQuestion,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		click_handler_5,
		click_handler_6
	];
}

class AdminUser extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			user: 0,
			questions: 6,
			currentQuestion: 7
		});
	}
}

export default AdminUser;