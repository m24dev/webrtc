/* src\js\AdminUser.svelte generated by Svelte v3.29.6 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	space,
	text
} from "../../web_modules/svelte/internal.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (95:0) {:else}
function create_else_block_1(ctx) {
	let div1;

	return {
		c() {
			div1 = element("div");
			div1.innerHTML = `<div class="spinner-border text-primary"><span class="sr-only">Загрузка...</span></div>`;
			attr(div1, "class", "loader");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

// (67:0) {#if isPeerReady}
function create_if_block(ctx) {
	let if_block_anchor;

	function select_block_type_1(ctx, dirty) {
		if (users.length) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type_1(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if_block.p(ctx, dirty);
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (90:4) {:else}
function create_else_block(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<p>Ожидание пользователей</p>`;
			attr(div, "class", "p-5 text-center");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (68:4) {#if users.length}
function create_if_block_1(ctx) {
	let div;
	let each_value = users;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "users");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*users, toggleVideo*/ 0) {
				each_value = users;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (70:12) {#each users as user}
function create_each_block(ctx) {
	let div5;
	let div4;
	let div1;
	let div0;
	let video;
	let t0;
	let button0;
	let t2;
	let div3;
	let div2;
	let h5;
	let t3_value = /*user*/ ctx[1].peer + "";
	let t3;
	let t4;
	let button1;
	let t6;
	let p;
	let t7;
	let t8_value = /*user*/ ctx[1].points + "";
	let t8;
	let t9;
	let mounted;
	let dispose;

	function click_handler(...args) {
		return /*click_handler*/ ctx[0](/*user*/ ctx[1], ...args);
	}

	return {
		c() {
			div5 = element("div");
			div4 = element("div");
			div1 = element("div");
			div0 = element("div");
			video = element("video");
			t0 = space();
			button0 = element("button");
			button0.textContent = "Вкл./Выкл. видео";
			t2 = space();
			div3 = element("div");
			div2 = element("div");
			h5 = element("h5");
			t3 = text(t3_value);
			t4 = space();
			button1 = element("button");
			button1.textContent = "Добавить";
			t6 = space();
			p = element("p");
			t7 = text("Правильных ответов: ");
			t8 = text(t8_value);
			t9 = space();
			attr(button0, "type", "button");
			attr(div0, "class", "user__video");
			attr(div1, "class", "col-md-4");
			attr(h5, "class", "card-title");
			attr(button1, "type", "button");
			attr(p, "class", "card-text");
			attr(div2, "class", "card-body");
			attr(div3, "class", "col-md-8");
			attr(div4, "class", "row no-gutters");
			attr(div5, "class", "user card mb-3");
		},
		m(target, anchor) {
			insert(target, div5, anchor);
			append(div5, div4);
			append(div4, div1);
			append(div1, div0);
			append(div0, video);
			append(div0, t0);
			append(div0, button0);
			append(div4, t2);
			append(div4, div3);
			append(div3, div2);
			append(div2, h5);
			append(h5, t3);
			append(div2, t4);
			append(div2, button1);
			append(div2, t6);
			append(div2, p);
			append(p, t7);
			append(p, t8);
			append(div5, t9);

			if (!mounted) {
				dispose = listen(button0, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
		},
		d(detaching) {
			if (detaching) detach(div5);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (isPeerReady) return create_if_block;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if_block.p(ctx, dirty);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function toggleVideo(e, user) {
	console.log(111);
	const $btn = e.currentTarget;
	const $video = $btn.parentNode.querySelector("video");

	if (user.mediaConnection.open) {
		console.log(222);
		user.mediaConnection.close();
	} else {
		console.log(333);
		user.mediaConnection.answer();
		playVideo($video);
	}
}

function playVideo(user) {
	el.srcObject = stream;

	el.onloadedmetadata = () => {
		el.play();
	};
}

function onConneсtionClose(e) {
	users = users.map(user => {
		if (user.peer === e.detail.peer) {
			return { ...user, isDataConnectionClosed: true };
		}

		return user;
	});
}

function instance($$self) {
	peer.on("open", function (id) {
		console.log("open");
		isPeerReady = true;
	});

	peer.on("connection", function (conn) {
		console.log("connection");
		users = [...users, { dataConnection: conn, peer: conn.peer }];
	});

	peer.on("call", function (conn) {
		console.log("call");

		users = users.map(user => {
			if (user.peer === conn.peer) {
				conn.on("stream", stream => {
					playVideo(user);
				});

				return { ...user, mediaConnection: conn };
			}

			return user;
		});
	});

	peer.on("error", function (err) {
		console.error(err);
	});

	peer.on("disconnected", function () {
		console.log("disconnected");
	});

	const click_handler = (user, e) => toggleVideo(e, user);
	return [click_handler];
}

class AdminUser extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default AdminUser;