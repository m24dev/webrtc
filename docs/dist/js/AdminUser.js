import './AdminUser.css.proxy.js';
/* src\js\AdminUser.svelte generated by Svelte v3.29.6 */
import {
	SvelteComponent,
	action_destroyer,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	is_function,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text
} from "../../web_modules/svelte/internal.js";

import { createEventDispatcher } from "../../web_modules/svelte.js";

function create_if_block_1(ctx) {
	let div1;
	let div0;
	let video_1;
	let video_action;
	let mounted;
	let dispose;

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			video_1 = element("video");
			video_1.muted = true;
			attr(video_1, "class", "svelte-1302kxk");
			attr(div0, "class", "user__video svelte-1302kxk");
			attr(div1, "class", "col-md-2");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, video_1);

			if (!mounted) {
				dispose = action_destroyer(video_action = /*video*/ ctx[3].call(null, video_1, /*remoteStream*/ ctx[1]));
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (video_action && is_function(video_action.update) && dirty & /*remoteStream*/ 2) video_action.update.call(null, /*remoteStream*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(div1);
			mounted = false;
			dispose();
		}
	};
}

// (76:16) {#if user.mediaConnection}
function create_if_block(ctx) {
	let div0;
	let button0;
	let t1;
	let div3;
	let div1;
	let button1;
	let t3;
	let button2;
	let t5;
	let button3;
	let t7;
	let button4;
	let t9;
	let button5;
	let t11;
	let button6;
	let t13;
	let div2;
	let button7;
	let mounted;
	let dispose;

	return {
		c() {
			div0 = element("div");
			button0 = element("button");
			button0.textContent = "Показать видео";
			t1 = space();
			div3 = element("div");
			div1 = element("div");
			button1 = element("button");
			button1.textContent = "1";
			t3 = space();
			button2 = element("button");
			button2.textContent = "2";
			t5 = space();
			button3 = element("button");
			button3.textContent = "3";
			t7 = space();
			button4 = element("button");
			button4.textContent = "4";
			t9 = space();
			button5 = element("button");
			button5.textContent = "5";
			t11 = space();
			button6 = element("button");
			button6.textContent = "6";
			t13 = space();
			div2 = element("div");
			button7 = element("button");
			button7.textContent = "Мультиэкран";
			attr(button0, "type", "button");
			attr(button0, "class", "btn btn-secondary");
			attr(div0, "class", "mb-3");
			attr(button1, "type", "button");
			attr(button1, "class", "btn btn-secondary");
			attr(button2, "type", "button");
			attr(button2, "class", "btn btn-secondary");
			attr(button3, "type", "button");
			attr(button3, "class", "btn btn-secondary");
			attr(button4, "type", "button");
			attr(button4, "class", "btn btn-secondary");
			attr(button5, "type", "button");
			attr(button5, "class", "btn btn-secondary");
			attr(button6, "type", "button");
			attr(button6, "class", "btn btn-secondary");
			attr(div1, "class", "btn-group mr-2");
			attr(button7, "type", "button");
			attr(button7, "class", "btn btn-secondary");
			attr(div2, "class", "btn-group btn-group-toggle");
			attr(div2, "data-toggle", "buttons");
			attr(div3, "class", "btn-toolbar");
			attr(div3, "role", "toolbar");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			append(div0, button0);
			insert(target, t1, anchor);
			insert(target, div3, anchor);
			append(div3, div1);
			append(div1, button1);
			append(div1, t3);
			append(div1, button2);
			append(div1, t5);
			append(div1, button3);
			append(div1, t7);
			append(div1, button4);
			append(div1, t9);
			append(div1, button5);
			append(div1, t11);
			append(div1, button6);
			append(div3, t13);
			append(div3, div2);
			append(div2, button7);

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*acceptMedia*/ ctx[2]),
					listen(button1, "click", /*click_handler*/ ctx[5]),
					listen(button2, "click", /*click_handler_1*/ ctx[6]),
					listen(button3, "click", /*click_handler_2*/ ctx[7]),
					listen(button4, "click", /*click_handler_3*/ ctx[8]),
					listen(button5, "click", /*click_handler_4*/ ctx[9]),
					listen(button6, "click", /*click_handler_5*/ ctx[10]),
					listen(button7, "click", /*click_handler_6*/ ctx[11])
				];

				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching) detach(t1);
			if (detaching) detach(div3);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let div5;
	let div4;
	let t0;
	let div1;
	let div0;
	let h50;
	let t1_value = /*user*/ ctx[0].dataConnection.metadata.name + "";
	let t1;
	let t2;
	let div1_class_value;
	let t3;
	let div3;
	let div2;
	let h51;
	let t5;
	let p;
	let if_block0 = /*user*/ ctx[0].mediaConnection && create_if_block_1(ctx);
	let if_block1 = /*user*/ ctx[0].mediaConnection && create_if_block(ctx);

	return {
		c() {
			div5 = element("div");
			div4 = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			div1 = element("div");
			div0 = element("div");
			h50 = element("h5");
			t1 = text(t1_value);
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			div3 = element("div");
			div2 = element("div");
			h51 = element("h5");
			h51.textContent = "Ответы";
			t5 = space();
			p = element("p");
			p.textContent = `${points}`;
			attr(h50, "class", "card-title");
			attr(div0, "class", "card-body");

			attr(div1, "class", div1_class_value = /*user*/ ctx[0].mediaConnection
			? "col-md-8"
			: "col-md-10");

			attr(h51, "class", "card-title");
			attr(p, "class", "card-text");
			attr(div2, "class", "card-body");
			attr(div3, "class", "col-md-2");
			attr(div4, "class", "row no-gutters");
			attr(div5, "class", "user card mb-3");
		},
		m(target, anchor) {
			insert(target, div5, anchor);
			append(div5, div4);
			if (if_block0) if_block0.m(div4, null);
			append(div4, t0);
			append(div4, div1);
			append(div1, div0);
			append(div0, h50);
			append(h50, t1);
			append(div0, t2);
			if (if_block1) if_block1.m(div0, null);
			append(div4, t3);
			append(div4, div3);
			append(div3, div2);
			append(div2, h51);
			append(div2, t5);
			append(div2, p);
		},
		p(ctx, [dirty]) {
			if (/*user*/ ctx[0].mediaConnection) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(div4, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*user*/ 1 && t1_value !== (t1_value = /*user*/ ctx[0].dataConnection.metadata.name + "")) set_data(t1, t1_value);

			if (/*user*/ ctx[0].mediaConnection) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(div0, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty & /*user*/ 1 && div1_class_value !== (div1_class_value = /*user*/ ctx[0].mediaConnection
			? "col-md-8"
			: "col-md-10")) {
				attr(div1, "class", div1_class_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div5);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

let points = 0;

function handleData(data) {
	if (data.action === "answer") {
		
	}
}

function instance($$self, $$props, $$invalidate) {
	let { user } = $$props;
	const dispatch = createEventDispatcher();
	let remoteStream;

	function acceptMedia() {
		user.mediaConnection.on("stream", stream => {
			if (remoteStream) return false;
			console.log("stream");
			$$invalidate(1, remoteStream = stream);
		});

		user.mediaConnection.on("error", err => {
			console.error(err);
		});

		user.mediaConnection.answer();
	}

	function video(node, remoteStream) {
		return {
			update(remoteStream) {
				play(node);
			}
		};
	}

	function play(el) {
		el.srcObject = remoteStream;

		el.onloadedmetadata = () => {
			el.play();
		};
	}

	function connectToScreen(n) {
		dispatch("setUserConnect", { peer: user.peer, targetID: n });
	}

	user.dataConnection.on("data", handleData);
	const click_handler = () => connectToScreen(1);
	const click_handler_1 = () => connectToScreen(2);
	const click_handler_2 = () => connectToScreen(3);
	const click_handler_3 = () => connectToScreen(4);
	const click_handler_4 = () => connectToScreen(5);
	const click_handler_5 = () => connectToScreen(6);
	const click_handler_6 = () => connectToScreen(7);

	$$self.$$set = $$props => {
		if ("user" in $$props) $$invalidate(0, user = $$props.user);
	};

	return [
		user,
		remoteStream,
		acceptMedia,
		video,
		connectToScreen,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		click_handler_5,
		click_handler_6
	];
}

class AdminUser extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { user: 0 });
	}
}

export default AdminUser;