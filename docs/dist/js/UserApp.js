import './UserApp.css.proxy.js';
/* src\js\UserApp.svelte generated by Svelte v3.29.6 */
import {
	SvelteComponent,
	action_destroyer,
	add_render_callback,
	append,
	attr,
	check_outros,
	create_bidirectional_transition,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	is_function,
	listen,
	noop,
	run_all,
	safe_not_equal,
	space,
	text,
	toggle_class,
	transition_in,
	transition_out
} from "../../web_modules/svelte/internal.js";

import { fade, fly } from "../../web_modules/svelte/transition.js";
import Peer from "../../web_modules/peerjs.js";
import settings from "./settings.js";

function create_else_block(ctx) {
	let div;
	let button;
	let t;
	let mounted;
	let dispose;
	let if_block = /*isLoading*/ ctx[0] && create_if_block_4(ctx);

	return {
		c() {
			div = element("div");
			button = element("button");
			if (if_block) if_block.c();
			t = text("\r\n            Начать");
			attr(button, "type", "button");
			attr(button, "class", "btn btn-primary shadow-sm");
			button.disabled = /*isLoading*/ ctx[0];
			attr(div, "class", "popup");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, button);
			if (if_block) if_block.m(button, null);
			append(button, t);

			if (!mounted) {
				dispose = listen(button, "click", /*makeConnection*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*isLoading*/ ctx[0]) {
				if (if_block) {
					
				} else {
					if_block = create_if_block_4(ctx);
					if_block.c();
					if_block.m(button, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*isLoading*/ 1) {
				button.disabled = /*isLoading*/ ctx[0];
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};
}

// (189:0) {#if isPeerReady}
function create_if_block(ctx) {
	let t;
	let if_block1_anchor;
	let current;
	let if_block0 = /*isLocalStreamReady*/ ctx[2] && create_if_block_2(ctx);
	let if_block1 = isDisconnected && create_if_block_1(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*isLocalStreamReady*/ ctx[2]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*isLocalStreamReady*/ 4) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t.parentNode, t);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(if_block1_anchor);
		}
	};
}

// (213:12) {#if isLoading}
function create_if_block_4(ctx) {
	let span;

	return {
		c() {
			span = element("span");
			attr(span, "class", "spinner-border spinner-border-sm");
			attr(span, "role", "status");
			attr(span, "aria-hidden", "true");
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (190:4) {#if isLocalStreamReady}
function create_if_block_2(ctx) {
	let div;
	let video_1;
	let video_action;
	let t;
	let if_block_anchor;
	let current;
	let mounted;
	let dispose;
	let if_block = /*isQuestionActive*/ ctx[4] && create_if_block_3(ctx);

	return {
		c() {
			div = element("div");
			video_1 = element("video");
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			video_1.muted = true;
			attr(div, "class", "video");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, video_1);
			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;

			if (!mounted) {
				dispose = action_destroyer(video_action = /*video*/ ctx[8].call(null, video_1, /*localStream*/ ctx[5]));
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (video_action && is_function(video_action.update) && dirty & /*localStream*/ 32) video_action.update.call(null, /*localStream*/ ctx[5]);

			if (/*isQuestionActive*/ ctx[4]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*isQuestionActive*/ 16) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching) detach(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
			mounted = false;
			dispose();
		}
	};
}

// (194:8) {#if isQuestionActive}
function create_if_block_3(ctx) {
	let div1;
	let div0;
	let button0;
	let button0_transition;
	let t1;
	let button1;
	let button1_transition;
	let t3;
	let button2;
	let button2_transition;
	let t5;
	let button3;
	let button3_transition;
	let answerButtons_action;
	let current;
	let mounted;
	let dispose;

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			button0 = element("button");
			button0.textContent = "A";
			t1 = space();
			button1 = element("button");
			button1.textContent = "Б";
			t3 = space();
			button2 = element("button");
			button2.textContent = "В";
			t5 = space();
			button3 = element("button");
			button3.textContent = "Г";
			attr(button0, "type", "button");
			attr(button0, "class", "btn btn-primary svelte-1biodbv");
			attr(button0, "data-answer", "1");
			attr(button1, "type", "button");
			attr(button1, "class", "btn btn-primary svelte-1biodbv");
			attr(button1, "data-answer", "2");
			attr(button2, "type", "button");
			attr(button2, "class", "btn btn-primary svelte-1biodbv");
			attr(button2, "data-answer", "3");
			attr(button3, "type", "button");
			attr(button3, "class", "btn btn-primary svelte-1biodbv");
			attr(button3, "data-answer", "4");
			attr(div0, "class", "p-4 d-flex justify-content-around");
			attr(div1, "class", "buttons svelte-1biodbv");
			toggle_class(div1, "buttons_answered", /*isAnswered*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, button0);
			append(div0, t1);
			append(div0, button1);
			append(div0, t3);
			append(div0, button2);
			append(div0, t5);
			append(div0, button3);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div1, "click", /*handleAnswer*/ ctx[7]),
					action_destroyer(answerButtons_action = /*answerButtons*/ ctx[9].call(null, div1))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*isAnswered*/ 8) {
				toggle_class(div1, "buttons_answered", /*isAnswered*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!button0_transition) button0_transition = create_bidirectional_transition(button0, fly, { y: 100, opacity: 0 }, true);
				button0_transition.run(1);
			});

			add_render_callback(() => {
				if (!button1_transition) button1_transition = create_bidirectional_transition(button1, fly, { y: 100, opacity: 0, delay: 100 }, true);
				button1_transition.run(1);
			});

			add_render_callback(() => {
				if (!button2_transition) button2_transition = create_bidirectional_transition(button2, fly, { y: 100, opacity: 0, delay: 200 }, true);
				button2_transition.run(1);
			});

			add_render_callback(() => {
				if (!button3_transition) button3_transition = create_bidirectional_transition(button3, fly, { y: 100, opacity: 0, delay: 300 }, true);
				button3_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!button0_transition) button0_transition = create_bidirectional_transition(button0, fly, { y: 100, opacity: 0 }, false);
			button0_transition.run(0);
			if (!button1_transition) button1_transition = create_bidirectional_transition(button1, fly, { y: 100, opacity: 0, delay: 100 }, false);
			button1_transition.run(0);
			if (!button2_transition) button2_transition = create_bidirectional_transition(button2, fly, { y: 100, opacity: 0, delay: 200 }, false);
			button2_transition.run(0);
			if (!button3_transition) button3_transition = create_bidirectional_transition(button3, fly, { y: 100, opacity: 0, delay: 300 }, false);
			button3_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (detaching && button0_transition) button0_transition.end();
			if (detaching && button1_transition) button1_transition.end();
			if (detaching && button2_transition) button2_transition.end();
			if (detaching && button3_transition) button3_transition.end();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (205:4) {#if isDisconnected}
function create_if_block_1(ctx) {
	let div1;
	let div1_transition;
	let current;

	return {
		c() {
			div1 = element("div");
			div1.innerHTML = `<div class="alert alert-warning text-center">Соединение закрыто</div>`;
			attr(div1, "class", "popup p-4");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			current = true;
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, true);
				div1_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, false);
			div1_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (detaching && div1_transition) div1_transition.end();
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*isPeerReady*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

const adminID = "admin";
const multiscreenID = "multiscreen";
let isDisconnected = false;

function setMediaConnectionCallbacks(conn) {
	conn.on("error", err => {
		console.log(err);
	});
}

function instance($$self, $$props, $$invalidate) {
	const query = new URLSearchParams(location.search);
	let peer;
	let isLoading = false;
	let isPeerReady = false;
	let isLocalStreamReady = false;
	let isAnswered = false;
	let isQuestionActive = false;
	let adminDataConnection;
	let adminMediaConnection;
	let operatorDataConnection;
	let operatorMediaConnection;
	let multiscreenMediaConnection;
	let localStream;

	function makeConnection() {
		$$invalidate(0, isLoading = true);
		peer = new Peer(settings.callOptions);

		peer.on("open", function () {
			console.log("open");
			$$invalidate(1, isPeerReady = true);
			getMedia();
		});

		peer.on("error", function (err) {
			console.error(err);
		});

		peer.on("close", function () {
			console.log("close");
		});

		peer.on("disconnected", function () {
			console.log("disconnected");
		});
	}

	function getMedia() {
		navigator.mediaDevices.getUserMedia({
			audio: true,
			video: {
				width: { max: 720 },
				height: { max: 576 }
			}
		}).then(function (mediaStream) {
			$$invalidate(5, localStream = mediaStream);

			adminDataConnection = peer.connect(adminID, {
				metadata: { name: `Пользователь ${query.get("id")}` }
			});

			setDataConnectionCallbacks(adminDataConnection);
			adminMediaConnection = peer.call(adminID, localStream);
			setMediaConnectionCallbacks(adminMediaConnection);
			$$invalidate(2, isLocalStreamReady = true);
		}).catch(function (err) {
			console.log(err.name + ": " + err.message);
		});
	}

	function setDataConnectionCallbacks(conn) {
		conn.on("data", handleData);

		conn.on("close", () => {
			
		});

		conn.on("error", err => {
			console.log(err);
		});
	}

	function connectToOperator(operatorID) {
		if (operatorDataConnection) {
			operatorDataConnection.close();
		}

		operatorDataConnection = peer.connect(operatorID);
		setDataConnectionCallbacks(operatorDataConnection);

		if (operatorMediaConnection) {
			operatorMediaConnection.close();
		}

		operatorMediaConnection = peer.call(operatorID, localStream);
		setMediaConnectionCallbacks(operatorMediaConnection);
	}

	function connectToMultiscreen() {
		multiscreenMediaConnection = peer.call(multiscreenID, localStream);
		setMediaConnectionCallbacks(multiscreenMediaConnection);
	}

	function handleAnswer(e) {
		const selectedClass = "btn_selected";
		const $el = e.target;

		if ($el.classList.contains("btn") && !isAnswered) {
			$el.classList.add(selectedClass);

			let data = {
				action: "answer",
				answer: $el.dataset.answer
			};

			adminDataConnection.send(data);

			if (operatorDataConnection) {
				operatorDataConnection.send(data);
			}

			$$invalidate(3, isAnswered = true);
		}
	}

	function handleData(data) {
		if (data.action === "call") {
			if (data.targetID == 7) {
				connectToMultiscreen();
			} else {
				connectToOperator(`operator${data.targetID}`);
			}
		} else if (data.action === "startQuestion") {
			$$invalidate(4, isQuestionActive = true);
		} else if (data.action === "endQuestion") {
			$$invalidate(4, isQuestionActive = false);
		}
	}

	function video(node, localStream) {
		play(node);

		return {
			update(localStream) {
				play(node);
			}
		};
	}

	function play(el) {
		el.srcObject = localStream;

		el.onloadedmetadata = () => {
			el.play();
		};
	}

	function answerButtons(node) {
		return {
			destroy() {
				const selectedClass = "btn_selected";
				let $selected = node.querySelector(`.${selectedClass}`);

				if ($selected) {
					$selected.classList.remove(selectedClass);
				}

				$$invalidate(3, isAnswered = false);
			}
		};
	}

	return [
		isLoading,
		isPeerReady,
		isLocalStreamReady,
		isAnswered,
		isQuestionActive,
		localStream,
		makeConnection,
		handleAnswer,
		video,
		answerButtons
	];
}

class UserApp extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default UserApp;