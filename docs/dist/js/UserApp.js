import './UserApp.css.proxy.js';
/* src\js\UserApp.svelte generated by Svelte v3.29.6 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	binding_callbacks,
	check_outros,
	create_bidirectional_transition,
	create_in_transition,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	space,
	toggle_class,
	transition_in,
	transition_out
} from "../../web_modules/svelte/internal.js";

import { afterUpdate } from "../../web_modules/svelte.js";
import { fade, fly } from "../../web_modules/svelte/transition.js";
import Peer from "../../web_modules/peerjs.js";
import settings from "./settings.js";

function create_else_block(ctx) {
	let div;
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			button = element("button");
			button.textContent = "Начать";
			attr(button, "type", "button");
			attr(button, "class", "btn btn-lg btn-primary shadow-sm");
			attr(div, "class", "popup");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, button);

			if (!mounted) {
				dispose = listen(button, "click", /*makeConnection*/ ctx[5]);
				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (176:4) {#if isStarted}
function create_if_block_3(ctx) {
	let div1;

	return {
		c() {
			div1 = element("div");
			div1.innerHTML = `<div class="spinner-border text-primary"><span class="sr-only">Загрузка...</span></div>`;
			attr(div1, "class", "loader");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

// (156:0) {#if isPeerReady}
function create_if_block(ctx) {
	let div;
	let video_1;
	let div_transition;
	let t0;
	let t1;
	let if_block1_anchor;
	let current;
	let if_block0 = /*isMediaReady*/ ctx[2] && create_if_block_2(ctx);
	let if_block1 = isDisconnected && create_if_block_1(ctx);

	return {
		c() {
			div = element("div");
			video_1 = element("video");
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			video_1.muted = true;
			attr(div, "class", "video");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, video_1);
			/*video_1_binding*/ ctx[7](video_1);
			insert(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*isMediaReady*/ ctx[2]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*isMediaReady*/ 4) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, true);
				div_transition.run(1);
			});

			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, false);
			div_transition.run(0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			/*video_1_binding*/ ctx[7](null);
			if (detaching && div_transition) div_transition.end();
			if (detaching) detach(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t1);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(if_block1_anchor);
		}
	};
}

// (160:4) {#if isMediaReady}
function create_if_block_2(ctx) {
	let div1;
	let div0;
	let button0;
	let button0_intro;
	let t1;
	let button1;
	let button1_intro;
	let t3;
	let button2;
	let button2_intro;
	let t5;
	let button3;
	let button3_intro;
	let mounted;
	let dispose;

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			button0 = element("button");
			button0.textContent = "A";
			t1 = space();
			button1 = element("button");
			button1.textContent = "Б";
			t3 = space();
			button2 = element("button");
			button2.textContent = "В";
			t5 = space();
			button3 = element("button");
			button3.textContent = "Г";
			attr(button0, "type", "button");
			attr(button0, "class", "btn btn-primary svelte-1biodbv");
			attr(button0, "data-answer", "А");
			attr(button1, "type", "button");
			attr(button1, "class", "btn btn-primary svelte-1biodbv");
			attr(button1, "data-answer", "Б");
			attr(button2, "type", "button");
			attr(button2, "class", "btn btn-primary svelte-1biodbv");
			attr(button2, "data-answer", "В");
			attr(button3, "type", "button");
			attr(button3, "class", "btn btn-primary svelte-1biodbv");
			attr(button3, "data-answer", "Г");
			attr(div0, "class", "p-4 d-flex justify-content-around");
			attr(div1, "class", "buttons svelte-1biodbv");
			toggle_class(div1, "buttons_answered", /*isAnswered*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, button0);
			append(div0, t1);
			append(div0, button1);
			append(div0, t3);
			append(div0, button2);
			append(div0, t5);
			append(div0, button3);

			if (!mounted) {
				dispose = listen(div1, "click", /*handleAnswer*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*isAnswered*/ 8) {
				toggle_class(div1, "buttons_answered", /*isAnswered*/ ctx[3]);
			}
		},
		i(local) {
			if (!button0_intro) {
				add_render_callback(() => {
					button0_intro = create_in_transition(button0, fly, { y: 100, opacity: 0 });
					button0_intro.start();
				});
			}

			if (!button1_intro) {
				add_render_callback(() => {
					button1_intro = create_in_transition(button1, fly, { y: 100, opacity: 0, delay: 100 });
					button1_intro.start();
				});
			}

			if (!button2_intro) {
				add_render_callback(() => {
					button2_intro = create_in_transition(button2, fly, { y: 100, opacity: 0, delay: 200 });
					button2_intro.start();
				});
			}

			if (!button3_intro) {
				add_render_callback(() => {
					button3_intro = create_in_transition(button3, fly, { y: 100, opacity: 0, delay: 300 });
					button3_intro.start();
				});
			}
		},
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			mounted = false;
			dispose();
		}
	};
}

// (170:4) {#if isDisconnected}
function create_if_block_1(ctx) {
	let div1;
	let div1_transition;
	let current;

	return {
		c() {
			div1 = element("div");
			div1.innerHTML = `<div class="alert alert-warning text-center">Соединение закрыто</div>`;
			attr(div1, "class", "popup p-4");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			current = true;
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, true);
				div1_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, {}, false);
			div1_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (detaching && div1_transition) div1_transition.end();
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_if_block_3, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*isPeerReady*/ ctx[1]) return 0;
		if (/*isStarted*/ ctx[0]) return 1;
		return 2;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

const adminID = "admin";
const multiscreenID = "multiscreen";
let isDisconnected = false;

function setDataConnectionCallbacks(conn) {
	conn.on("data", handleData);

	conn.on("close", () => {
		
	});

	conn.on("error", err => {
		console.log(err);
	});
}

function setMediaConnectionCallbacks(conn) {
	conn.on("error", err => {
		console.log(err);
	});
}

function handleData(data) {
	console.log(data);
}

function instance($$self, $$props, $$invalidate) {
	const query = new URLSearchParams(location.search);
	const operatorID = `operator${query.get("id")}`;
	let peer;
	let isStarted = false;
	let isPeerReady = false;
	let isMediaReady = false;
	let isMediaStarted = false;
	let isAnswered = false;
	let adminDataConnection;
	let adminMediaConnection;
	let operatorDataConnection;
	let operatorMediaConnection;
	let multiscreenMediaConnection;
	let video;
	let stream;

	afterUpdate(() => {
		if (isMediaReady && !isMediaStarted) {
			$$invalidate(4, video.srcObject = stream, video);

			$$invalidate(
				4,
				video.onloadedmetadata = () => {
					video.play();
					isMediaStarted = true;
				},
				video
			);
		}
	});

	function makeConnection() {
		$$invalidate(0, isStarted = true);
		peer = new Peer(settings.callOptions);

		peer.on("open", function () {
			console.log("open");
			$$invalidate(1, isPeerReady = true);
			getMedia();
		});

		peer.on("error", function (err) {
			console.error(err);
		});

		peer.on("close", function () {
			console.log("close");
		});

		peer.on("disconnected", function () {
			console.log("disconnected");
		});
	}

	function getMedia() {
		navigator.mediaDevices.getUserMedia({
			audio: true,
			video: {
				width: { max: 720 },
				height: { max: 576 },
				frameRate: { ideal: 10 }
			}
		}).then(function (mediaStream) {
			stream = mediaStream;

			// adminDataConnection = peer.connect(adminID);
			// setDataConnectionCallbacks(adminDataConnection);
			// adminMediaConnection = peer.call(adminID, stream);
			// setMediaConnectionCallbacks(adminMediaConnection);
			connectToOperator();

			connectToMultiscreen();
			$$invalidate(2, isMediaReady = true);
		}).catch(function (err) {
			console.log(err.name + ": " + err.message);
		});
	}

	function connectToOperator() {
		operatorDataConnection = peer.connect(operatorID);
		setDataConnectionCallbacks(operatorDataConnection);
		operatorMediaConnection = peer.call(operatorID, stream);
		setMediaConnectionCallbacks(operatorMediaConnection);
	}

	function connectToMultiscreen() {
		multiscreenMediaConnection = peer.call(multiscreenID, stream);
		setMediaConnectionCallbacks(multiscreenMediaConnection);
	}

	function handleAnswer(e) {
		const selectedClass = "btn_selected";
		const $el = e.target;

		if ($el.classList.contains("btn") && !isAnswered) {
			$el.classList.add(selectedClass);
			let data = { answer: $el.dataset.answer };
			operatorDataConnection.send(data);
			$$invalidate(3, isAnswered = true);

			setTimeout(
				() => {
					$el.classList.remove(selectedClass);
					$$invalidate(3, isAnswered = false);
				},
				3000
			);
		}
	}

	function video_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			video = $$value;
			$$invalidate(4, video);
		});
	}

	return [
		isStarted,
		isPeerReady,
		isMediaReady,
		isAnswered,
		video,
		makeConnection,
		handleAnswer,
		video_1_binding
	];
}

class UserApp extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default UserApp;