import './OperatorApp.css.proxy.js';
/* src\js\OperatorApp.svelte generated by Svelte v3.29.6 */
import {
	SvelteComponent,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	transition_in,
	transition_out
} from "../../web_modules/svelte/internal.js";

import Peer from "../../web_modules/peerjs.js";
import Connection from "./Connection.js";
import settings from "./settings.js";

function create_else_block_1(ctx) {
	let div1;

	return {
		c() {
			div1 = element("div");
			div1.innerHTML = `<div class="spinner-border text-primary"><span class="sr-only">Loading...</span></div>`;
			attr(div1, "class", "loader");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

// (53:0) {#if isPeerReady}
function create_if_block(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*curConnection*/ ctx[1].dataConnection && /*curConnection*/ ctx[1].mediaConnection) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (56:4) {:else}
function create_else_block(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.innerHTML = `<p>Ожидание соединения</p>`;
			attr(div, "class", "message svelte-1w8zwo9");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (54:4) {#if curConnection.dataConnection && curConnection.mediaConnection}
function create_if_block_1(ctx) {
	let connection;
	let current;

	connection = new Connection({
			props: {
				username: /*username*/ ctx[2],
				dataConnection: /*curConnection*/ ctx[1].dataConnection,
				mediaConnection: /*curConnection*/ ctx[1].mediaConnection,
				closed: /*curConnection*/ ctx[1].isClosed
			}
		});

	connection.$on("close", /*onConneсtionClose*/ ctx[3]);

	return {
		c() {
			create_component(connection.$$.fragment);
		},
		m(target, anchor) {
			mount_component(connection, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const connection_changes = {};
			if (dirty & /*curConnection*/ 2) connection_changes.dataConnection = /*curConnection*/ ctx[1].dataConnection;
			if (dirty & /*curConnection*/ 2) connection_changes.mediaConnection = /*curConnection*/ ctx[1].mediaConnection;
			if (dirty & /*curConnection*/ 2) connection_changes.closed = /*curConnection*/ ctx[1].isClosed;
			connection.$set(connection_changes);
		},
		i(local) {
			if (current) return;
			transition_in(connection.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(connection.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(connection, detaching);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*isPeerReady*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const query = new URLSearchParams(location.search);
	const id = query.get("id");
	const peer = new Peer(`operator${id}`, settings.callOptions);
	let isPeerReady = false;
	let curConnection = {};
	let username = `Оператор`;

	function onConneсtionClose(event) {
		if (curConnection.peer === event.detail.peer) {
			$$invalidate(1, curConnection = { ...curConnection, isClosed: true });
		}
	}

	peer.on("connection", function (dataConnection) {
		console.log("connection");

		$$invalidate(1, curConnection = {
			...curConnection,
			dataConnection,
			peer: dataConnection.peer
		});
	});

	peer.on("call", function (mediaConnection) {
		console.log("call");

		if (curConnection.peer === mediaConnection.peer) {
			$$invalidate(1, curConnection = { ...curConnection, mediaConnection });
		}
	});

	peer.on("open", function (id) {
		console.log("open");
		$$invalidate(0, isPeerReady = true);
	});

	peer.on("error", function (err) {
		console.error(err);
	});

	return [isPeerReady, curConnection, username, onConneсtionClose];
}

class OperatorApp extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default OperatorApp;