import './Caller.css.proxy.js';
/* src\js\Caller.svelte generated by Svelte v3.29.6 */
import {
	SvelteComponent,
	add_render_callback,
	attr,
	check_outros,
	create_bidirectional_transition,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	safe_not_equal,
	transition_in,
	transition_out
} from "../../web_modules/svelte/internal.js";

import { fade } from "../../web_modules/svelte/transition.js";
import Peer from "../../web_modules/peerjs.js";
import Connection from "./Connection.js";
import settings from "./settings.js";

function create_if_block(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (!(/*isDataConnectionStarted*/ ctx[1] && /*isMediaConnectionStarted*/ ctx[2])) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (77:8) {:else}
function create_else_block(ctx) {
	let connection;
	let current;

	connection = new Connection({
			props: {
				username,
				dataConnection: /*dataConnection*/ ctx[3],
				mediaConnection: /*mediaConnection*/ ctx[4]
			}
		});

	connection.$on("close", /*onConneсtionClose*/ ctx[6]);

	return {
		c() {
			create_component(connection.$$.fragment);
		},
		m(target, anchor) {
			mount_component(connection, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const connection_changes = {};
			if (dirty & /*dataConnection*/ 8) connection_changes.dataConnection = /*dataConnection*/ ctx[3];
			if (dirty & /*mediaConnection*/ 16) connection_changes.mediaConnection = /*mediaConnection*/ ctx[4];
			connection.$set(connection_changes);
		},
		i(local) {
			if (current) return;
			transition_in(connection.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(connection.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(connection, detaching);
		}
	};
}

// (75:8) {#if !(isDataConnectionStarted && isMediaConnectionStarted)}
function create_if_block_1(ctx) {
	let button;
	let button_transition;
	let current;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			button.textContent = "Начать";
			attr(button, "type", "button");
			attr(button, "class", "btn btn-primary btn-start shadow-sm svelte-1j7nwsj");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*makeConnection*/ ctx[5]);
				mounted = true;
			}
		},
		p: noop,
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!button_transition) button_transition = create_bidirectional_transition(button, fade, {}, true);
				button_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!button_transition) button_transition = create_bidirectional_transition(button, fade, {}, false);
			button_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (detaching && button_transition) button_transition.end();
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div;
	let current;
	let if_block = /*isPeerReady*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			attr(div, "class", "user bg-dark svelte-1j7nwsj");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*isPeerReady*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*isPeerReady*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
		}
	};
}

let username = "Вася";

function instance($$self, $$props, $$invalidate) {
	const peer = new Peer(settings.callOptions);
	let isPeerReady = false;
	let isDataConnectionStarted = false;
	let isMediaConnectionStarted = false;
	let dataConnection;
	let mediaConnection;

	function makeConnection() {
		$$invalidate(3, dataConnection = peer.connect(settings.moderatorId, { metadata: { username } }));
		$$invalidate(1, isDataConnectionStarted = true);

		navigator.mediaDevices.getUserMedia({ audio: true, video: true }).then(function (mediaStream) {
			$$invalidate(4, mediaConnection = peer.call(settings.moderatorId, mediaStream));
			$$invalidate(2, isMediaConnectionStarted = true);
		}).catch(function (err) {
			alert.log(err.name + ": " + err.message);
		});
	}

	function onConneсtionClose() {
		$$invalidate(1, isDataConnectionStarted = false);
		$$invalidate(2, isMediaConnectionStarted = false);
	}

	peer.on("open", function (id) {
		$$invalidate(0, isPeerReady = true);
	});

	peer.on("error", function (err) {
		console.error(err);
	});

	return [
		isPeerReady,
		isDataConnectionStarted,
		isMediaConnectionStarted,
		dataConnection,
		mediaConnection,
		makeConnection,
		onConneсtionClose
	];
}

class Caller extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Caller;